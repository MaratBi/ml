# üì¶ –ò–º–ø–æ—Ä—Ç—ã
import os
import cv2
import numpy as np
import pandas as pd
from fer import FER
from pathlib import Path
from tqdm import tqdm
import joblib
from tpot import TPOTClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# ==== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ====
BASE_DIR = Path(__file__).resolve().parent
dataset_base = Path(os.environ.get("DATASET_ROOT", BASE_DIR))
DATASET_ROOTS = [dataset_base / "0", dataset_base / "1"]
LABEL_MAP = {"0": "ok", "1": "suspicious"}
FRAME_LIMIT = 20

# ==== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ====
print("üöÄ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
detector = FER(mtcnn=True)
results = []

# ==== –ü—Ä–æ—Ö–æ–¥ –ø–æ –ø–∞–ø–∫–∞–º ====
for dataset_path in DATASET_ROOTS:
    label_name = dataset_path.name
    true_label = LABEL_MAP[label_name]

    for case in tqdm(sorted(dataset_path.iterdir()), desc=f"üìÇ –ü–∞–ø–∫–∞ {label_name}"):
        if not case.is_dir():
            continue
        emotion_list = []
        for img_path in sorted(case.glob("*.jpg"))[:FRAME_LIMIT]:
            img = cv2.imread(str(img_path))
            if img is None:
                continue
            try:
                res = detector.detect_emotions(img)
                if res:
                    emotion_list.append(res[0]['emotions'])
            except Exception:
                continue

        if not emotion_list:
            continue

        arr = np.array([[e[k] for k in e] for e in emotion_list])
        keys = list(emotion_list[0].keys())

        features = {f"mean_{k}": float(np.mean(arr[:, i])) for i, k in enumerate(keys)}
        features.update({f"var_{k}": float(np.var(arr[:, i])) for i, k in enumerate(keys)})
        features["label"] = true_label
        features["folder"] = str(case)
        results.append(features)

# ==== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ====
df = pd.DataFrame(results)
df.to_csv(BASE_DIR / "emotion_features.csv", index=False)
print("‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: emotion_features.csv")

# ==== –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ TPOT ====
print("üß† –û–±—É—á–µ–Ω–∏–µ AutoML –º–æ–¥–µ–ª–∏ —Å TPOT...")
X = df.drop(columns=["label", "folder"])
y = df["label"]

X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.25, random_state=42)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–≥–∫–∏–π –∫–æ–Ω—Ñ–∏–≥, –±–µ–∑ QuantileTransformer
tpot = TPOTClassifier(
    generations=5,
    population_size=20,
    verbosity=2,
    random_state=42,
    n_jobs=-1,
    config_dict='TPOT light'  # ‚úÖ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º
)
tpot.fit(X_train, y_train)

# ==== –û—Ü–µ–Ω–∫–∞ ====
y_pred = tpot.predict(X_test)
print("\nüìà –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç:")
print(classification_report(y_test, y_pred))

# ==== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ –∫–æ–¥–∞ ====
joblib.dump(tpot.fitted_pipeline_, BASE_DIR / "tpot_emotion_model.pkl")
tpot.export(BASE_DIR / "tpot_best_pipeline.py")

print("\nüéâ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:")
print(" - tpot_emotion_model.pkl")
print(" - tpot_best_pipeline.py")
